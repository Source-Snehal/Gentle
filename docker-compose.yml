version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: gentle
      POSTGRES_USER: gentle
      POSTGRES_PASSWORD: gentle
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gentle -d gentle"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./api/.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://gentle:gentle@db:5432/gentle
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - ./api/.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://gentle:gentle@db:5432/gentle
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app
    command: celery -A app.celery_app worker -l info

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./web/.env.example
    depends_on:
      - api
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data: